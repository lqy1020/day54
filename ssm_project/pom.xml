<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">  
  <modelVersion>4.0.0</modelVersion>  
  <groupId>com.lqy.ssm_project</groupId>  
  <artifactId>ssm_project</artifactId>  
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration><!--配置插件设置-->
                    <source>1.8</source><!--源码的jdk版本-->
                    <target>1.8</target><!--字节码的jdk版本-->
                </configuration>
            </plugin>
        </plugins>
    </build>


    <dependencies>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.37</version>
        </dependency>

        <dependency><!--连接池依赖-->
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.19</version>
        </dependency>
        <dependency><!--mybatis-->
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.5</version>
        </dependency>
        <dependency><!--spring与mybatis整合依赖-->
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>2.0.4</version>
        </dependency>
        <!--spring整合mybatis支持依赖-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>5.2.3.RELEASE</version>
        </dependency>

        <!--日志整合依赖
        jcl:spring5以上的日志处理包 以log4j2为实现框架
        log4j和log4j2  1.0和2.0
        slf4j：log4j2和spring日志的桥接处理包

        log4j2配置流程：
        1.引入log4j2依赖
        2.引入配置文件到resources下
        a.log4j2.properties
        b.log4j2.xml
        ...
        -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.12.0</version>
        </dependency>
        <dependency><!--springmvc依赖-->
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.2.3.RELEASE</version>
        </dependency>
        <dependency><!--ajax依赖-->
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.12.6.1</version>
        </dependency>


        <!--aop支持依赖-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>5.2.3.RELEASE</version>
        </dependency>


        <!--测试依赖-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>5.2.3.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper</artifactId>
            <version>4.1.5</version>
        </dependency>


        <!--
   分页开发：
   1.引入分页依赖
   2.修改整合配置类SpringMybatisConfig,给SqlSessionFactoryBean添加分页插件
   3.在执行的查询sql语句调用前添加分页api开启分页  PageHelper.startPage(页码索引，每页条数)
   4.将查询结果list封装到PageInfo对象
   -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>5.1.10</version>
        </dependency>


        <!--
    富文本编辑器后端配置流程：
    1.引入依赖文件   ueditor-1.1.2.jar 在中央仓库无法下载 需要手动打包到本地仓库
    a.打开控制台，通过 mvn install命令打包
    b.mvn执行需要先设置环境变量中添加MAVEN_HOME
    2.将config.json放入到类路径
    3.将源码包中的ueditor-1.4.3.3\jsp\src的代码放入到当前工程下
    4.编写统一响应接口，实现读取json文件转换成json配置字符串功能和图片上传功能（需要搭建springmvc文件上传配置环境）
    -->

        <dependency>
            <groupId>com.baidu</groupId>
            <artifactId>ueditor</artifactId>
            <version>1.1.2</version>
        </dependency>
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20170516</version>
        </dependency>

        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3.3</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.9</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
        </dependency>

        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.9.0</version><!--注意版本区别，springDataRedis2以下的依赖jedis版本是在3.0以下的-->
        </dependency>

        <dependency><!--spring提供的与redis集成的依赖-->
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
            <version>1.8.12.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
            <version>2.2.5</version>
        </dependency>

        <dependency>
            <groupId>com.github.penggle</groupId>
            <artifactId>kaptcha</artifactId>
            <version>2.3.2</version>
        </dependency>


    </dependencies>



</project>
